@startuml

package "Factory Example" {
    interface Creator
    class ConcreteCreator
    class Product
    class ConcreteProduct
    class FactoryContext

    Creator <|.. ConcreteCreator
    Creator <.. Product
    Product <|-- ConcreteProduct
    FactoryContext --> Creator

    Creator : +createProduct()
    ConcreteCreator : +createProduct()
    Product : +performOperation()
    FactoryContext : -creator: Creator
    FactoryContext : +clientCode()
    FactoryContext : +setCreator(creator: Creator)
    ConcreteProduct : +additionalMethod1()
    ConcreteProduct : +additionalMethod2()
}

package "Builder Example" {
    class CarDirector
    class CarBuilder
    class ConcreteCarBuilder
    class CarProduct
    class CarAssemblyContext

    CarDirector --> CarBuilder
    CarBuilder <|-- ConcreteCarBuilder
    CarDirector *--> CarProduct
    CarAssemblyContext *--> CarDirector

    CarDirector : +constructCar()
    CarBuilder : +buildEngine()
    CarBuilder : +buildChassis()
    CarBuilder : +buildInterior()
    CarProduct : +assembleParts()
    CarAssemblyContext : -director: CarDirector
    CarAssemblyContext : +setDirector(director: CarDirector)
    CarAssemblyContext : +assembleCar(builder: CarBuilder)
    CarProduct : +additionalFeature1()
    CarProduct : +additionalFeature2()
}

@enduml
